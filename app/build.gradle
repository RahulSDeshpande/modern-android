apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs"

android {
    compileSdkVersion buildConfig.compileSdk

    def fabricPropertiesFile = rootProject.file("app/fabric.properties")
    def fabricProperties = new Properties()
    if (fabricPropertiesFile.exists()) {
        fabricProperties.load(new FileInputStream(fabricPropertiesFile))
    }

    defaultConfig {
        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true

        ext.betaDistributionEmails = "aykuttasil@gmail.com"
        ext.betaDistributionNotifications = true
        resValue "string", "io.fabric.ApiKey", fabricProperties['apiKey']
    }

    def keystorePropertiesFile = rootProject.file("keystore.properties")
    def keystoreProperties = new Properties()
    if (keystorePropertiesFile.exists()) {
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    }
    signingConfigs {
        debug {
            keyAlias keystoreProperties['signingKeyAliasDebug']
            keyPassword keystoreProperties['signingKeyAliasPasswordDebug']
            storeFile file(keystoreProperties['signingStoreFileDebug'])
            storePassword keystoreProperties['signingStorePasswordDebug']
        }

        release {
            keyAlias keystoreProperties['signingKeyAlias']
            keyPassword keystoreProperties['signingKeyAliasPassword']
            storeFile file(keystoreProperties['signingStoreFile'])
            storePassword keystoreProperties['signingStorePassword']
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "default"
    productFlavors {
        prod {
            dimension "default"
            resValue "string", "app_name", "MAS"
        }

        dev {
            dimension "default"
            resValue "string", "app_name", "MAS Dev"
        }

        mock {
            dimension "default"
            resValue "string", "app_name", "MAS Mock"
        }
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'LICENSE.txt'
        exclude 'META-INF/license/LICENSE.base64.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/MANIFEST.MF'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }

    lintOptions {
        abortOnError false
    }

    dataBinding {
        enabled = true
    }

    androidExtensions {
        experimental = true
    }

    configurations.all {
        resolutionStrategy {
            force 'com.google.code.findbugs:jsr305:3.0.2'
            force 'net.bytebuddy:byte-buddy:1.8.22'
            force 'net.bytebuddy:byte-buddy-agent:1.8.22'
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = output.outputFile.name
                    .replace(".apk", "-${variant.versionName}-${variant.versionCode}.apk")
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation project(':common')
    implementation project(':network')

    testImplementation "junit:junit:$versions.junit"
    testImplementation "org.robolectric:robolectric:$versions.robolectric"
    testImplementation "com.squareup.okhttp3:mockwebserver:3.8.1"
    testImplementation "androidx.test:core:$versions.androidx.test_core"
    testImplementation "androidx.test:runner:$versions.androidx.test_runner"
    testImplementation "androidx.test:rules:$versions.androidx.test_rules"
    testImplementation "androidx.test.ext:junit:$versions.androidx.test_ext_junit"
    testImplementation("androidx.test.espresso:espresso-core:$versions.androidx.espresso_core", {
        exclude group: 'com.google.code.findbugs'
    })
    testImplementation "com.google.code.findbugs:jsr305:3.0.2"
    testImplementation "org.mockito:mockito-android:2.22.0"
    testImplementation "org.mockito:mockito-core:2.23.4"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0"

    androidTestImplementation "org.mockito:mockito-android:2.22.0"
    androidTestImplementation "org.mockito:mockito-core:2.23.4"
    // androidTestImplementation "androidx.arch.core:core-testing:$versions.androidx.arch_core_testing"

    // Core library
    androidTestImplementation "androidx.test:core:$versions.androidx.test_core"

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation "androidx.test:runner:$versions.androidx.test_runner"
    androidTestImplementation "androidx.test:rules:$versions.androidx.test_rules"

    // Assertions
    androidTestImplementation "androidx.test.ext:junit:$versions.androidx.test_ext_junit"
    androidTestImplementation "androidx.test.ext:truth:$versions.androidx.test_ext_truth"
    androidTestImplementation 'com.google.truth:truth:0.42'

    // Espresso dependencies
    androidTestImplementation("androidx.test.espresso:espresso-core:$versions.androidx.espresso_core", {
        exclude group: 'com.google.code.findbugs'
    })
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$versions.androidx.espresso_contrib"
    //androidTestImplementation 'androidx.test.espresso:espresso-intents:3.1.1'
    //androidTestImplementation 'androidx.test.espresso:espresso-accessibility:3.1.1'
    //androidTestImplementation 'androidx.test.espresso:espresso-web:3.1.1'
    //androidTestImplementation 'androidx.test.espresso.idling:idling-concurrent:3.1.1'

    // The following Espresso dependency can be either "implementation"
    // or "androidTestImplementation", depending on whether you want the
    // dependency to appear on your APK's compile classpath or the test APK
    // classpath.
    //implementation 'androidx.test.espresso:espresso-idling-resource:3.1.1'
    // androidTestImplementation 'com.google.code.findbugs:jsr305:3.0.2'

    releaseImplementation 'com.github.ajitsing:sherlock-no-op:1.0.4@aar'
    debugImplementation('com.github.ajitsing:sherlock:1.0.4@aar') {
        transitive = true
    }

    implementation('com.crashlytics.sdk.android:crashlytics:2.9.8@aar') {
        transitive = true
    }

    debugImplementation "com.facebook.stetho:stetho:$versions.stetho"

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation "androidx.appcompat:appcompat:$versions.androidx.appcompat"
    implementation "androidx.core:core:$versions.androidx.core"
    implementation "androidx.core:core-ktx:$versions.androidx.core_ktx"
    implementation 'androidx.vectordrawable:vectordrawable-animated:1.0.0'
    implementation "androidx.cardview:cardview:$versions.androidx.cardview"
    implementation "androidx.constraintlayout:constraintlayout:$versions.androidx.constraint_layout"
    implementation 'androidx.annotation:annotation:1.0.1'
    implementation 'androidx.gridlayout:gridlayout:1.0.0'
    implementation 'androidx.multidex:multidex:2.0.1'

    implementation "androidx.lifecycle:lifecycle-extensions:$versions.androidx.lifecycle"
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$versions.androidx.lifecycle"

    implementation "androidx.room:room-runtime:$versions.androidx.room"
    kapt "androidx.room:room-compiler:$versions.androidx.room"
    implementation "androidx.room:room-rxjava2:$versions.androidx.room"

    implementation "com.google.android.material:material:$versions.material_design"
    implementation 'com.google.firebase:firebase-database:16.0.5'

    implementation "android.arch.navigation:navigation-fragment:1.0.0-alpha09"
    implementation "android.arch.navigation:navigation-ui:1.0.0-alpha09"
    implementation "android.arch.work:work-runtime-ktx:1.0.0-beta01"
    implementation "android.arch.work:work-firebase:1.0.0-alpha11"

    implementation "io.reactivex.rxjava2:rxkotlin:$versions.rxkotlin"
    implementation "io.reactivex.rxjava2:rxandroid:$versions.rxandroid"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$versions.kotlin"
    implementation "org.jetbrains.anko:anko:$versions.anko"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.0.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.0.0'

    implementation 'com.tbruyelle.rxpermissions:rxpermissions:0.9.4@aar'
    implementation 'com.jakewharton:butterknife:9.0.0-rc3'
    kapt 'com.jakewharton:butterknife-compiler:9.0.0-rc3'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation "com.jakewharton.timber:timber:$versions.timber"

    kapt "com.google.dagger:dagger-compiler:$versions.dagger"
    implementation "com.google.dagger:dagger:$versions.dagger"
    kapt "com.google.dagger:dagger-android-processor:$versions.dagger"
    implementation "com.google.dagger:dagger-android-support:$versions.dagger"
}
// apply plugin: 'com.google.gms.google-services'

